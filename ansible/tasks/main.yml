---
# Setup OKD Helper Node

- hosts: all
  vars_files:
    - ../vars/main.yml
    - ../vars/ports.yml
    - ../defaults/main.yaml
  handlers:
  - import_tasks: ../handlers/main.yml

  # Running Pretasks like checking hostnames and verifying the version of ansible
  pre_tasks:
  - name: Verify Ansible version.
    assert:
      that: "ansible_version.full is version_compare('2.9', '>=')"
      msg: >
          "You must update Ansible to at least 2.9"
  - name: validate hostnames
    import_tasks: validate_host_names.yaml
    
  # tasks:
  # - name: generate ssh keys
  #   import_tasks: generate_ssh_keys.yaml
  #   when: ssh_gen_key

  - name: set setup facts
    include: set_facts_.yaml

  - name: Install needed packages
    package:
      name: "{{ packages }}"
      state: present

  - name: Install packages for DHCP install
    package:
      name: "{{ dhcppkgs }}"
      state: present

  - name: Install additional package for Intel platforms
    package:
      name: "{{ syslinuxpkgs }}"
      state: present

  - name: Write out dhcp file
    template:
      src: ../templates/dhcpd.conf.j2
      dest: /etc/dhcp/dhcpd.conf
    notify:
      - restart dhcpd

  - name: Setup named configuration files
    block:
    - name: Write out named file
      template:
        src: ../templates/named.conf.j2
        dest: /etc/named.conf
      notify:
        - restart bind
    
    - name: Installing DNS Serialnumber generator
      copy:
        src: ../files/set-dns-serial.sh
        dest: /usr/local/bin/set-dns-serial.sh
        mode: '0555'

    - name: Set zone serial number
      shell: "/usr/local/bin/set-dns-serial.sh"
      register: dymanicserialnumber

    - name: Setting serial number as a fact
      set_fact:
        serialnumber: "{{ dymanicserialnumber.stdout }}"

    - name: Write out "{{ dns.domain | lower }}" zone file
      template:
        src: ../templates/zonefile.j2
        dest: /var/named/zonefile.db
        mode: '0644'
      notify:
        - restart bind

    - name: Write out reverse zone file
      template:
        src: ../templates/reverse.j2
        dest: /var/named/reverse.db
        mode: '0644'
      notify:
        - restart bind

    - name: Write out haproxy config file
      template:
        src: ../templates/haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
      notify:
        - restart haproxy

    - name: Set HTTP server and prepare OCP4 bios
      block:
      - name: Copy httpd conf file
        copy:
          src: ../files/httpd.conf
          dest: /etc/httpd/conf/httpd.conf
        notify:
          - restart httpd

  - name: Start firewalld service
    systemd:
      name: firewalld
      state: started
      enabled: yes

  - name: Open up firewall ports
    firewalld:
      permanent: yes
      immediate: yes
      state: enabled
      port: "{{ item[0] }}"
    delegate_to: "{{ item[1] }}"
    run_once: true
    with_nested:
      - "{{ ports }}"
      - "{{ ansible_play_batch }}"

  - name: Best effort SELinux repair - DNS
    shell: "restorecon -vR /var/named || true"
  
  - name: Best effort SELinux repair - Apache
    shell: "restorecon -vR /var/www/html || true"


  - name: Create NFS export directory
    file:
      path: /export
      state: directory
      mode: 0777
      owner: "{{ owner }}"
      group: "{{ group }}"
    notify:
      - restart nfs

  - name: Copy NFS export conf file
    copy:
      src: ../files/nfs-exports
      dest: /etc/exports
    notify:
      - restart nfs

  - name: SEBool allow haproxy connect any port
    seboolean:
      name: haproxy_connect_any
      state: yes
      persistent: yes
    notify:
      - restart haproxy

  - name: Starting services
    service:
      name: "{{ item }}"
      enabled: yes
      state: started
    with_items:
      - "{{ services }}"

  - name: Starting DHCP service
    service:
      name: "{{ item }}"
      enabled: yes
      state: started
    with_items:
      - dhcpd

  - name: Copy info script over
    template:
      src: ../templates/checker.sh.j2
      dest: /usr/local/bin/helpernodecheck
      owner: root
      group: root
      mode: 0555

  - name: Copying over nfs-provisioner rbac
    copy:
      src: ../files/nfs-provisioner-rbac.yaml
      dest: /usr/local/src/nfs-provisioner-rbac.yaml
      owner: root
      group: root
      mode: 0666

  - name: Copying over nfs-provisioner deployment
    template:
      src: ../templates/nfs-provisioner-deployment.yaml.j2
      dest: /usr/local/src/nfs-provisioner-deployment.yaml
      owner: root
      group: root
      mode: 0666

  - name: Copying over nfs-provisioner storageclass
    copy:
      src: ../files/nfs-provisioner-sc.yaml
      dest: /usr/local/src/nfs-provisioner-sc.yaml
      owner: root
      group: root
      mode: 0666

  - name: Copying over nfs-provisioner setup script
    copy:
      src: ../files/nfs-provisioner-setup.sh
      dest: /usr/local/bin/nfs-provisioner-setup.sh
      owner: root
      group: root
      mode: 0555

  - name: Copying over a sample PVC file for NFS
    copy:
      src: ../files/registry-pvc.yaml
      dest: /usr/local/src/registry-pvc.yaml
      mode: '0555'

  - name: Set the local resolv.conf file
    template:
      src: ../templates/resolv.conf.j2
      dest: /etc/resolv.conf

  - name: Get network device system name
    shell: "nmcli -t dev show {{ networkifacename }} | grep GENERAL.CONNECTION | cut -d: -f2"
    register: devicesystemname

  - name: Setting network device system name as a fact
    set_fact:
      dsname: "{{ devicesystemname.stdout }}"

  - name: Setting DNS server ip on network interface "{{ dsname }}" to 127.0.0.1
    shell: 'nmcli con mod "{{ dsname }}" ipv4.dns 127.0.0.1'

  - name: Setting DNS search path on network interface "{{ dsname }}" to "{{ dns.clusterid }}.{{ dns.domain | lower }}"
    shell: 'nmcli con mod  "{{ dsname }}" ipv4.dns-search {{ dns.clusterid }}.{{ dns.domain | lower }}'

  - name: Restarting NetworkManager
    service:
      name: "{{ item }}"
      state: restarted
    with_items:
      - NetworkManager

  - name: Setup Local Registry
    when: setup_registry.deploy
    block:
    - name: Install registry packages
      package:
        name: "{{ registry }}"
        state: present

    - name: Setup Registry
      import_tasks: setup_registry.yaml

  - name: Enable restart always for critical services
    include_tasks: restart_config.yaml
    loop: "{{ critical_services }}"

  - name:  Information about this install
    debug:
      msg:
        - "Please run /usr/local/bin/helpernodecheck for information"